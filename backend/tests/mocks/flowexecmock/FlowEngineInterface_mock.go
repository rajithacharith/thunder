// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package flowexecmock

import (
	"github.com/asgardeo/thunder/internal/flow"
	"github.com/asgardeo/thunder/internal/system/error/serviceerror"
	mock "github.com/stretchr/testify/mock"
)

// NewFlowEngineInterfaceMock creates a new instance of FlowEngineInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlowEngineInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlowEngineInterfaceMock {
	mock := &FlowEngineInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FlowEngineInterfaceMock is an autogenerated mock type for the FlowEngineInterface type
type FlowEngineInterfaceMock struct {
	mock.Mock
}

type FlowEngineInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FlowEngineInterfaceMock) EXPECT() *FlowEngineInterfaceMock_Expecter {
	return &FlowEngineInterfaceMock_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type FlowEngineInterfaceMock
func (_mock *FlowEngineInterfaceMock) Execute(ctx *flow.EngineContext) (flow.FlowStep, *serviceerror.ServiceError) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 flow.FlowStep
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(*flow.EngineContext) (flow.FlowStep, *serviceerror.ServiceError)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(*flow.EngineContext) flow.FlowStep); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(flow.FlowStep)
	}
	if returnFunc, ok := ret.Get(1).(func(*flow.EngineContext) *serviceerror.ServiceError); ok {
		r1 = returnFunc(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// FlowEngineInterfaceMock_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type FlowEngineInterfaceMock_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx *flow.EngineContext
func (_e *FlowEngineInterfaceMock_Expecter) Execute(ctx interface{}) *FlowEngineInterfaceMock_Execute_Call {
	return &FlowEngineInterfaceMock_Execute_Call{Call: _e.mock.On("Execute", ctx)}
}

func (_c *FlowEngineInterfaceMock_Execute_Call) Run(run func(ctx *flow.EngineContext)) *FlowEngineInterfaceMock_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *flow.EngineContext
		if args[0] != nil {
			arg0 = args[0].(*flow.EngineContext)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FlowEngineInterfaceMock_Execute_Call) Return(flowStep flow.FlowStep, serviceError *serviceerror.ServiceError) *FlowEngineInterfaceMock_Execute_Call {
	_c.Call.Return(flowStep, serviceError)
	return _c
}

func (_c *FlowEngineInterfaceMock_Execute_Call) RunAndReturn(run func(ctx *flow.EngineContext) (flow.FlowStep, *serviceerror.ServiceError)) *FlowEngineInterfaceMock_Execute_Call {
	_c.Call.Return(run)
	return _c
}
