// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package flowexecmock

import (
	"github.com/asgardeo/thunder/internal/flow"
	"github.com/asgardeo/thunder/internal/flowexec"
	mock "github.com/stretchr/testify/mock"
)

// NewFlowStoreInterfaceMock creates a new instance of FlowStoreInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlowStoreInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlowStoreInterfaceMock {
	mock := &FlowStoreInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FlowStoreInterfaceMock is an autogenerated mock type for the FlowStoreInterface type
type FlowStoreInterfaceMock struct {
	mock.Mock
}

type FlowStoreInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FlowStoreInterfaceMock) EXPECT() *FlowStoreInterfaceMock_Expecter {
	return &FlowStoreInterfaceMock_Expecter{mock: &_m.Mock}
}

// DeleteFlowContext provides a mock function for the type FlowStoreInterfaceMock
func (_mock *FlowStoreInterfaceMock) DeleteFlowContext(flowID string) error {
	ret := _mock.Called(flowID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFlowContext")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(flowID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FlowStoreInterfaceMock_DeleteFlowContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFlowContext'
type FlowStoreInterfaceMock_DeleteFlowContext_Call struct {
	*mock.Call
}

// DeleteFlowContext is a helper method to define mock.On call
//   - flowID string
func (_e *FlowStoreInterfaceMock_Expecter) DeleteFlowContext(flowID interface{}) *FlowStoreInterfaceMock_DeleteFlowContext_Call {
	return &FlowStoreInterfaceMock_DeleteFlowContext_Call{Call: _e.mock.On("DeleteFlowContext", flowID)}
}

func (_c *FlowStoreInterfaceMock_DeleteFlowContext_Call) Run(run func(flowID string)) *FlowStoreInterfaceMock_DeleteFlowContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FlowStoreInterfaceMock_DeleteFlowContext_Call) Return(err error) *FlowStoreInterfaceMock_DeleteFlowContext_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FlowStoreInterfaceMock_DeleteFlowContext_Call) RunAndReturn(run func(flowID string) error) *FlowStoreInterfaceMock_DeleteFlowContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetFlowContext provides a mock function for the type FlowStoreInterfaceMock
func (_mock *FlowStoreInterfaceMock) GetFlowContext(flowID string) (*flowexec.FlowContextWithUserDataDB, error) {
	ret := _mock.Called(flowID)

	if len(ret) == 0 {
		panic("no return value specified for GetFlowContext")
	}

	var r0 *flowexec.FlowContextWithUserDataDB
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*flowexec.FlowContextWithUserDataDB, error)); ok {
		return returnFunc(flowID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *flowexec.FlowContextWithUserDataDB); ok {
		r0 = returnFunc(flowID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flowexec.FlowContextWithUserDataDB)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(flowID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FlowStoreInterfaceMock_GetFlowContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlowContext'
type FlowStoreInterfaceMock_GetFlowContext_Call struct {
	*mock.Call
}

// GetFlowContext is a helper method to define mock.On call
//   - flowID string
func (_e *FlowStoreInterfaceMock_Expecter) GetFlowContext(flowID interface{}) *FlowStoreInterfaceMock_GetFlowContext_Call {
	return &FlowStoreInterfaceMock_GetFlowContext_Call{Call: _e.mock.On("GetFlowContext", flowID)}
}

func (_c *FlowStoreInterfaceMock_GetFlowContext_Call) Run(run func(flowID string)) *FlowStoreInterfaceMock_GetFlowContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FlowStoreInterfaceMock_GetFlowContext_Call) Return(flowContextWithUserDataDB *flowexec.FlowContextWithUserDataDB, err error) *FlowStoreInterfaceMock_GetFlowContext_Call {
	_c.Call.Return(flowContextWithUserDataDB, err)
	return _c
}

func (_c *FlowStoreInterfaceMock_GetFlowContext_Call) RunAndReturn(run func(flowID string) (*flowexec.FlowContextWithUserDataDB, error)) *FlowStoreInterfaceMock_GetFlowContext_Call {
	_c.Call.Return(run)
	return _c
}

// StoreFlowContext provides a mock function for the type FlowStoreInterfaceMock
func (_mock *FlowStoreInterfaceMock) StoreFlowContext(ctx flow.EngineContext) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StoreFlowContext")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(flow.EngineContext) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FlowStoreInterfaceMock_StoreFlowContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreFlowContext'
type FlowStoreInterfaceMock_StoreFlowContext_Call struct {
	*mock.Call
}

// StoreFlowContext is a helper method to define mock.On call
//   - ctx flow.EngineContext
func (_e *FlowStoreInterfaceMock_Expecter) StoreFlowContext(ctx interface{}) *FlowStoreInterfaceMock_StoreFlowContext_Call {
	return &FlowStoreInterfaceMock_StoreFlowContext_Call{Call: _e.mock.On("StoreFlowContext", ctx)}
}

func (_c *FlowStoreInterfaceMock_StoreFlowContext_Call) Run(run func(ctx flow.EngineContext)) *FlowStoreInterfaceMock_StoreFlowContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 flow.EngineContext
		if args[0] != nil {
			arg0 = args[0].(flow.EngineContext)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FlowStoreInterfaceMock_StoreFlowContext_Call) Return(err error) *FlowStoreInterfaceMock_StoreFlowContext_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FlowStoreInterfaceMock_StoreFlowContext_Call) RunAndReturn(run func(ctx flow.EngineContext) error) *FlowStoreInterfaceMock_StoreFlowContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFlowContext provides a mock function for the type FlowStoreInterfaceMock
func (_mock *FlowStoreInterfaceMock) UpdateFlowContext(ctx flow.EngineContext) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlowContext")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(flow.EngineContext) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FlowStoreInterfaceMock_UpdateFlowContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFlowContext'
type FlowStoreInterfaceMock_UpdateFlowContext_Call struct {
	*mock.Call
}

// UpdateFlowContext is a helper method to define mock.On call
//   - ctx flow.EngineContext
func (_e *FlowStoreInterfaceMock_Expecter) UpdateFlowContext(ctx interface{}) *FlowStoreInterfaceMock_UpdateFlowContext_Call {
	return &FlowStoreInterfaceMock_UpdateFlowContext_Call{Call: _e.mock.On("UpdateFlowContext", ctx)}
}

func (_c *FlowStoreInterfaceMock_UpdateFlowContext_Call) Run(run func(ctx flow.EngineContext)) *FlowStoreInterfaceMock_UpdateFlowContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 flow.EngineContext
		if args[0] != nil {
			arg0 = args[0].(flow.EngineContext)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FlowStoreInterfaceMock_UpdateFlowContext_Call) Return(err error) *FlowStoreInterfaceMock_UpdateFlowContext_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FlowStoreInterfaceMock_UpdateFlowContext_Call) RunAndReturn(run func(ctx flow.EngineContext) error) *FlowStoreInterfaceMock_UpdateFlowContext_Call {
	_c.Call.Return(run)
	return _c
}
